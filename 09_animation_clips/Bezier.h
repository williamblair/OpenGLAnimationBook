#ifndef BEZIER_H_INCLUDED
#define BEZIER_H_INCLUDED

// represents Bezier curve generated by lerp'ing
// between these four points multiple times and 
// connecting the result point dots; the lines 
// connecting these points are tangent to the desired curve
template<typename T>
class Bezier
{
public:
    T P1;   // point 1
    T C1;   // control 1
    T P2;   // point 2
    T C2;   // control 2
};

// un-simplified implementatoin showing below is just a simplification 
// of linear interpolation
// assumes 0 <= t <= 1
//template <typename T>
//inline T Interpolate(Bezier<T>& curve, float t) {
//    T A = lerp(curve.P1, curve.C1, t);
//    T B = lerp(curve.C2, curve.P2, t);
//    T C = lerp(curve.C1, curve.C2, t);
//    T D = lerp(A, C, t);
//    T E = lerp(C, B, t);
//    T R = lerp(D, E, t);
//    
//    return R;
//}

// alternate/expanded implementation
// in the form of the basis functions of a bezier spline
template <typename T>
inline T Interpolate(Bezier<T>& curve, float t) {
    return curve.P1 * ((1-t) * (1-t) * (1-t)) +         // curve 1
           curve.C1 * (3.0f * ((1-t) * (1-t)) * t) +    // curve 2
           curve.C2 * (3.0f * (1-t) * (t*t)) +          // curve 3
           curve.P2 * (t*t*t);                          // curve 4
}

// example usage
// Bezier<Vec3> curve;
// curve.P1 = Vec3(-5, 0, 0);
// curve.P2 = Vec3( 5, 0, 0);
// curve.C1 = Vec3(-2, 1, 0);
// curve.C2 = Vec3( 2, 1, 0);
//
// Vec3 red     = Vec3(1, 0, 0);
// Vec3 green   = Vec3(0, 1, 0);
// Vec3 blue    = Vec3(0, 0, 1);
// Vec3 magenta = Vec3(1, 0, 1);
//
// DrawPoint(curve.P1, red);
// DrawPoint(curve.C1, green);
// DrawPoint(curve.P2, red);
// DrawPoint(curve.C2, green);
//
// DrawLine(curve.P1, curve.C1, blue);
// DrawLine(curve.P2, curve.C2, blue);
//
// // resolution is 200 steps since last point is i + 1
// for (int i = 0; i < 199; i++) {
//   float t0 = (float)i / 199.0f;
//   float t1 = (float)(i+1) / 199.0f;
//
//   Vec3 thisPoint = Interpolate(curve, t0);
//   Vec3 nextPoint = Interpolate(curve, t1);
//   DrawLine(thisPoint, nextPoint, magenta);
// }

#endif

